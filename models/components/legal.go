// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Status string

const (
	StatusCompliant   Status = "compliant"
	StatusIncompliant Status = "incompliant"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "compliant":
		fallthrough
	case "incompliant":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type Legal struct {
	Legaltags                  []string `json:"legaltags,omitempty"`
	OtherRelevantDataCountries []string `json:"otherRelevantDataCountries"`
	Status                     *Status  `json:"status,omitempty"`
}

func (o *Legal) GetLegaltags() []string {
	if o == nil {
		return nil
	}
	return o.Legaltags
}

func (o *Legal) GetOtherRelevantDataCountries() []string {
	if o == nil {
		return []string{}
	}
	return o.OtherRelevantDataCountries
}

func (o *Legal) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}
