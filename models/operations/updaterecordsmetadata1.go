// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"openapi/internal/utils"
	"openapi/models/components"
)

type UpdateRecordsMetadata1Request struct {
	// x-collaboration
	XCollaboration *string `header:"style=simple,explode=false,name=x-collaboration"`
	// Tenant Id
	DataPartitionID       string                           `header:"style=simple,explode=false,name=data-partition-id"`
	RecordBulkUpdateParam components.RecordBulkUpdateParam `request:"mediaType=application/json"`
}

func (o *UpdateRecordsMetadata1Request) GetXCollaboration() *string {
	if o == nil {
		return nil
	}
	return o.XCollaboration
}

func (o *UpdateRecordsMetadata1Request) GetDataPartitionID() string {
	if o == nil {
		return ""
	}
	return o.DataPartitionID
}

func (o *UpdateRecordsMetadata1Request) GetRecordBulkUpdateParam() components.RecordBulkUpdateParam {
	if o == nil {
		return components.RecordBulkUpdateParam{}
	}
	return o.RecordBulkUpdateParam
}

type UpdateRecordsMetadata1RecordsResponseBodyType string

const (
	UpdateRecordsMetadata1RecordsResponseBodyTypePatchRecordsResponse      UpdateRecordsMetadata1RecordsResponseBodyType = "PatchRecordsResponse"
	UpdateRecordsMetadata1RecordsResponseBodyTypeBulkUpdateRecordsResponse UpdateRecordsMetadata1RecordsResponseBodyType = "BulkUpdateRecordsResponse"
)

// UpdateRecordsMetadata1RecordsResponseBody - Records updated successful partially.
type UpdateRecordsMetadata1RecordsResponseBody struct {
	PatchRecordsResponse      *components.PatchRecordsResponse
	BulkUpdateRecordsResponse *components.BulkUpdateRecordsResponse

	Type UpdateRecordsMetadata1RecordsResponseBodyType
}

func CreateUpdateRecordsMetadata1RecordsResponseBodyPatchRecordsResponse(patchRecordsResponse components.PatchRecordsResponse) UpdateRecordsMetadata1RecordsResponseBody {
	typ := UpdateRecordsMetadata1RecordsResponseBodyTypePatchRecordsResponse

	return UpdateRecordsMetadata1RecordsResponseBody{
		PatchRecordsResponse: &patchRecordsResponse,
		Type:                 typ,
	}
}

func CreateUpdateRecordsMetadata1RecordsResponseBodyBulkUpdateRecordsResponse(bulkUpdateRecordsResponse components.BulkUpdateRecordsResponse) UpdateRecordsMetadata1RecordsResponseBody {
	typ := UpdateRecordsMetadata1RecordsResponseBodyTypeBulkUpdateRecordsResponse

	return UpdateRecordsMetadata1RecordsResponseBody{
		BulkUpdateRecordsResponse: &bulkUpdateRecordsResponse,
		Type:                      typ,
	}
}

func (u *UpdateRecordsMetadata1RecordsResponseBody) UnmarshalJSON(data []byte) error {

	var patchRecordsResponse components.PatchRecordsResponse = components.PatchRecordsResponse{}
	if err := utils.UnmarshalJSON(data, &patchRecordsResponse, "", true, true); err == nil {
		u.PatchRecordsResponse = &patchRecordsResponse
		u.Type = UpdateRecordsMetadata1RecordsResponseBodyTypePatchRecordsResponse
		return nil
	}

	var bulkUpdateRecordsResponse components.BulkUpdateRecordsResponse = components.BulkUpdateRecordsResponse{}
	if err := utils.UnmarshalJSON(data, &bulkUpdateRecordsResponse, "", true, true); err == nil {
		u.BulkUpdateRecordsResponse = &bulkUpdateRecordsResponse
		u.Type = UpdateRecordsMetadata1RecordsResponseBodyTypeBulkUpdateRecordsResponse
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateRecordsMetadata1RecordsResponseBody", string(data))
}

func (u UpdateRecordsMetadata1RecordsResponseBody) MarshalJSON() ([]byte, error) {
	if u.PatchRecordsResponse != nil {
		return utils.MarshalJSON(u.PatchRecordsResponse, "", true)
	}

	if u.BulkUpdateRecordsResponse != nil {
		return utils.MarshalJSON(u.BulkUpdateRecordsResponse, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateRecordsMetadata1RecordsResponseBody: all fields are null")
}

type UpdateRecordsMetadata1ResponseBodyType string

const (
	UpdateRecordsMetadata1ResponseBodyTypePatchRecordsResponse      UpdateRecordsMetadata1ResponseBodyType = "PatchRecordsResponse"
	UpdateRecordsMetadata1ResponseBodyTypeBulkUpdateRecordsResponse UpdateRecordsMetadata1ResponseBodyType = "BulkUpdateRecordsResponse"
)

// UpdateRecordsMetadata1ResponseBody - Records updated successfully.
type UpdateRecordsMetadata1ResponseBody struct {
	PatchRecordsResponse      *components.PatchRecordsResponse
	BulkUpdateRecordsResponse *components.BulkUpdateRecordsResponse

	Type UpdateRecordsMetadata1ResponseBodyType
}

func CreateUpdateRecordsMetadata1ResponseBodyPatchRecordsResponse(patchRecordsResponse components.PatchRecordsResponse) UpdateRecordsMetadata1ResponseBody {
	typ := UpdateRecordsMetadata1ResponseBodyTypePatchRecordsResponse

	return UpdateRecordsMetadata1ResponseBody{
		PatchRecordsResponse: &patchRecordsResponse,
		Type:                 typ,
	}
}

func CreateUpdateRecordsMetadata1ResponseBodyBulkUpdateRecordsResponse(bulkUpdateRecordsResponse components.BulkUpdateRecordsResponse) UpdateRecordsMetadata1ResponseBody {
	typ := UpdateRecordsMetadata1ResponseBodyTypeBulkUpdateRecordsResponse

	return UpdateRecordsMetadata1ResponseBody{
		BulkUpdateRecordsResponse: &bulkUpdateRecordsResponse,
		Type:                      typ,
	}
}

func (u *UpdateRecordsMetadata1ResponseBody) UnmarshalJSON(data []byte) error {

	var patchRecordsResponse components.PatchRecordsResponse = components.PatchRecordsResponse{}
	if err := utils.UnmarshalJSON(data, &patchRecordsResponse, "", true, true); err == nil {
		u.PatchRecordsResponse = &patchRecordsResponse
		u.Type = UpdateRecordsMetadata1ResponseBodyTypePatchRecordsResponse
		return nil
	}

	var bulkUpdateRecordsResponse components.BulkUpdateRecordsResponse = components.BulkUpdateRecordsResponse{}
	if err := utils.UnmarshalJSON(data, &bulkUpdateRecordsResponse, "", true, true); err == nil {
		u.BulkUpdateRecordsResponse = &bulkUpdateRecordsResponse
		u.Type = UpdateRecordsMetadata1ResponseBodyTypeBulkUpdateRecordsResponse
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateRecordsMetadata1ResponseBody", string(data))
}

func (u UpdateRecordsMetadata1ResponseBody) MarshalJSON() ([]byte, error) {
	if u.PatchRecordsResponse != nil {
		return utils.MarshalJSON(u.PatchRecordsResponse, "", true)
	}

	if u.BulkUpdateRecordsResponse != nil {
		return utils.MarshalJSON(u.BulkUpdateRecordsResponse, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateRecordsMetadata1ResponseBody: all fields are null")
}

type UpdateRecordsMetadata1Response struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Records updated successfully.
	TwoHundredApplicationJSONOneOf *UpdateRecordsMetadata1ResponseBody
	// Records updated successful partially.
	TwoHundredAndSixApplicationJSONOneOf *UpdateRecordsMetadata1RecordsResponseBody
}

func (o *UpdateRecordsMetadata1Response) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateRecordsMetadata1Response) GetTwoHundredApplicationJSONOneOf() *UpdateRecordsMetadata1ResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONOneOf
}

func (o *UpdateRecordsMetadata1Response) GetTwoHundredAndSixApplicationJSONOneOf() *UpdateRecordsMetadata1RecordsResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredAndSixApplicationJSONOneOf
}
